---
- name: Install Node.js and NPM
  hosts: web
  become: true
  vars:
    nodejs_version: "20.x"
    nodejs_keyring: /usr/share/keyrings/nodesource.gpg
    force_reinstall: false
    db_host: "mongodb://{{ hostvars['ec2-db-vm']['ansible_host'] }}:27017/posts"
  tasks:
    # - name: Ensure apt-transport-https is installed
    #   apt:
    #     name: apt-transport-https
    #     state: present
    #     update_cache: yes

    - name: Debug inventory information
      debug:
        msg: 
          - "DB Host: {{ db_host }}"
          - "Database server IP: {{ hostvars['ec2-db-vm']['ansible_host'] }}"
      
    - name: Check if Node.js is already installed and get version
      command: node --version
      register: node_check
      changed_when: false
      failed_when: false
      check_mode: no

    - name: Set node installation status
      set_fact:
        node_needs_install: "{{ node_check.rc != 0 or 'v20.' not in node_check.stdout | default('') or force_reinstall }}"

    - name: Ensure previous Node.js packages are removed if needed
      apt:
        name: "{{ item }}"
        state: absent
        purge: yes
      loop:
        - nodejs
        - libnode-dev
        - npm
      when: node_needs_install

    - name: Add NodeSource GPG key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
        keyring: "{{ nodejs_keyring }}"
      when: node_needs_install

    - name: Add NodeSource repository
      apt_repository:
        repo: "deb [signed-by={{ nodejs_keyring }}] https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
        state: present
        filename: nodesource
      when: node_needs_install

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes
      register: nodejs_install
      when: node_needs_install

    - name: Get Node.js version
      command: node --version
      register: node_version
      changed_when: false
      check_mode: no

    - name: Get npm version
      command: npm --version
      register: npm_version
      changed_when: false
      check_mode: no

    - name: Install PM2 globally
      npm:
        name: pm2
        global: yes
        state: present
      register: pm2_install

    - name: Get PM2 version
      command: pm2 --version
      register: pm2_version
      changed_when: false
      check_mode: no
      
    - name: Install Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes
      
    - name: Configure Nginx as reverse proxy
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
            listen 80 default_server;
            listen [::]:80 default_server;
            
            root /var/www/html;
            index index.html index.htm index.nginx-debian.html;
            server_name _;
            
            location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
            }
          }
      register: nginx_config_changed
      notify: Restart Nginx
      
    - name: Ensure Nginx sites-enabled directory exists
      file:
        path: /etc/nginx/sites-enabled
        state: directory
        mode: '0755'
        
    - name: Enable Nginx site configuration
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
        force: yes
      register: nginx_site_enabled
      
    - name: Verify app is running on port 3000
      uri:
        url: http://localhost:3000
        method: GET
        status_code: 200
      register: app_status
      failed_when: false
      changed_when: false
        
    - name: Force restart Nginx service
      service:
        name: nginx
        state: restarted
      when: nginx_config_changed.changed or nginx_site_enabled.changed
      
    - name: Verify Nginx configuration
      command: nginx -t
      register: nginx_test
      changed_when: false
      
    - name: Debug Nginx test
      debug:
        var: nginx_test.stdout_lines
      when: nginx_test is defined
        
    - name: Create directory for the app
      file:
        path: /repo
        state: directory
        mode: "0755"

    - name: Clone or update repository
      git:
        repo: https://github.com/stravos97/node-sparta-test-app.git
        dest: /repo
        update: yes
        force: no
      register: git_result

    - name: Install npm dependencies
      npm:
        path: /repo/app
        state: present
        ci: false  # Using regular npm install instead of npm ci
      register: npm_install
      # Removed any conditions to ensure it runs every time

    - name: Check if app is running in PM2
      shell: pm2 list | grep " app " | grep -q "online" || echo ""
      register: app_check
      changed_when: false
      failed_when: false
      check_mode: no

    - name: Set environmental variable DB_HOST
      lineinfile:
        path: /etc/environment
        regexp: "^DB_HOST="
        line: 'DB_HOST="{{ db_host }}"'
        state: present
      register: env_var_set

    - name: Export DB_HOST in current shell
      shell: export DB_HOST="{{ db_host }}"
      changed_when: false
      
    - name: Verify DB_HOST is correctly set
      debug:
        msg: "Current DB_HOST value: {{ db_host }}"

    - name: Set app running status
      set_fact:
        app_running: "{{ app_check.rc == 0 }}"
        db_host_is_set: true

    - name: Stop any existing PM2 processes to ensure clean restart
      command: pm2 delete all
      args:
        chdir: /repo/app
      failed_when: false
      changed_when: true
      
    - name: Start app with PM2
      command: pm2 start app.js
      args:
        chdir: /repo/app
      environment:
        DB_HOST: "{{ db_host }}"
      changed_when: true
      
    - name: Ensure the database seeding runs
      command: node seeds/seed.js
      args:
        chdir: /repo/app
      environment:
        DB_HOST: "{{ db_host }}"
      changed_when: true
      failed_when: false

    - name: Display versions
      debug:
        msg:
          - "Node.js version: {{ node_version.stdout }}"
          - "npm version: {{ npm_version.stdout }}"
          - "PM2 version: {{ pm2_version.stdout }}"
          - "Git clone/update result: {{ 'Changed' if git_result.changed else 'No change' }}"
          - "npm install result: {{ 'Changed' if npm_install.changed else 'No change' }}"
          
  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted